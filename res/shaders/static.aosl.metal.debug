MSL(OSX)
Vertex Shader:
#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_params
{
    float4x4 mvp;
    float4 resolution_time;
};

struct vs_main_out
{
    float4 out_var_COLOR0 [[user(locn0)]];
    float2 out_var_UV [[user(locn1)]];
    float2 out_var_TEXCOORD0 [[user(locn2)]];
    float4 gl_Position [[position]];
};

struct vs_main_in
{
    float2 in_var_POS [[attribute(0)]];
    float2 in_var_UV [[attribute(1)]];
    float4 in_var_COLOR [[attribute(2)]];
};

vertex vs_main_out vs_main(vs_main_in in [[stage_in]], constant type_params& params [[buffer(0)]])
{
    vs_main_out out = {};
    float4 _39 = params.mvp * float4(in.in_var_POS, 0.0, 1.0);
    out.out_var_COLOR0 = in.in_var_COLOR;
    out.out_var_UV = in.in_var_UV;
    out.out_var_TEXCOORD0 = (_39.xy + float2(1.0)) * float2(0.5);
    out.gl_Position = _39;
    return out;
}



Fragment Shader:
#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_params
{
    float4x4 mvp;
    float4 resolution_time;
};

struct ps_main_out
{
    float4 out_var_SV_Target0 [[color(0)]];
};

struct ps_main_in
{
    float4 in_var_COLOR0 [[user(locn0)]];
    float2 in_var_UV [[user(locn1)]];
};

fragment ps_main_out ps_main(ps_main_in in [[stage_in]], constant type_params& params [[buffer(0)]], texture2d<float> albedo [[texture(0)]], texture2d<float> noise_texture [[texture(1)]], sampler albedo_smp [[sampler(0)]], sampler noise_texture_smp [[sampler(1)]])
{
    ps_main_out out = {};
    float _59 = fma(0.300000011920928955078125, sin(fma(5.0, cos(params.resolution_time.z * 5.0), params.resolution_time.z)), 3.0);
    float _61 = in.in_var_UV.y - 0.5;
    float _66 = in.in_var_UV.x - 0.5;
    float4 _75 = in.in_var_COLOR0 * albedo.sample(albedo_smp, in.in_var_UV);
    float2 _83 = (float2(1.0, fma(-2.0, cos(params.resolution_time.z), 2.0)) * params.resolution_time.z) * 8.0;
    float4 _87 = noise_texture.sample(noise_texture_smp, (_83 + (fma(in.in_var_UV, float2(0.5, 0.0), float2(1.0, -2.0)) * 1.0)));
    float _88 = _87.x;
    float _97 = fmod(fma(in.in_var_UV.y, 4.0, params.resolution_time.z * 0.5) + sin(params.resolution_time.z + sin(params.resolution_time.z * 0.62999999523162841796875)), 1.0);
    float _100 = step(0.5, _97) - step(0.60000002384185791015625, _97);
    float4 _110 = noise_texture.sample(noise_texture_smp, (_83 + ((in.in_var_UV * 2.0) * 1.0)));
    float _111 = _110.x;
    float3 _126 = ((((_75.xyz + float3((fma((_97 - 0.5) * (-9.9999980926513671875), _100, 1.0) * _100) * (_88 * _88))).xyz + float3((_111 * _111) * 0.5)).xyz * (fma(-(_59 * _61), _61, 1.0) * fma(-(_59 * _66), _66, 1.0))).xyz * float3(0.20000000298023223876953125)).xyz * _75.w;
    out.out_var_SV_Target0 = float4(_126.x, _126.y, _126.z, _75.w);
    return out;
}


MSL(iOS)
Vertex Shader:
#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_params
{
    float4x4 mvp;
    float4 resolution_time;
};

struct vs_main_in
{
    float2 in_var_POS [[attribute(0)]];
    float2 in_var_UV [[attribute(1)]];
    float4 in_var_COLOR [[attribute(2)]];
};

struct vs_main_out
{
    float4 out_out_var_COLOR0 [[user(locn0)]];
    float2 out_out_var_UV [[user(locn1)]];
    float2 out_out_var_TEXCOORD0 [[user(locn2)]];
    float4 out_gl_Position [[position]];
};

struct vs_main_in_1
{
    float2 in_in_var_POS [[attribute(0)]];
    float2 in_in_var_UV [[attribute(1)]];
    float4 in_in_var_COLOR [[attribute(2)]];
};

vertex vs_main_out vs_main(vs_main_in_1 in [[stage_in]], constant type_params& params [[buffer(0)]])
{
    vs_main_out out = {};
    vs_main_out out_1 = {};
    float4 _39 = params.mvp * float4(in.in.in_var_POS, 0.0, 1.0);
    out.out.out_var_COLOR0 = in.in.in_var_COLOR;
    out.out.out_var_UV = in.in.in_var_UV;
    out.out.out_var_TEXCOORD0 = (_39.xy + float2(1.0)) * float2(0.5);
    out.gl_Position = _39;
    return out_1;
}



Fragment Shader:
#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct type_params
{
    float4x4 mvp;
    float4 resolution_time;
};

struct ps_main_out
{
    float4 out_var_SV_Target0 [[color(0)]];
};

struct ps_main_in
{
    float4 in_var_COLOR0 [[user(locn0)]];
    float2 in_var_UV [[user(locn1)]];
};

struct ps_main_out_1
{
    float4 out_out_var_SV_Target0 [[color(0)]];
};

struct ps_main_in_1
{
    float4 in_in_var_COLOR0 [[user(locn0)]];
    float2 in_in_var_UV [[user(locn1)]];
};

fragment ps_main_out_1 ps_main(ps_main_in_1 in [[stage_in]], constant type_params& params [[buffer(0)]], texture2d<float> albedo [[texture(0)]], texture2d<float> noise_texture [[texture(1)]], sampler albedo_smp [[sampler(0)]], sampler noise_texture_smp [[sampler(1)]])
{
    ps_main_out out = {};
    ps_main_out_1 out_1 = {};
    float _59 = fma(0.300000011920928955078125, sin(fma(5.0, cos(params.resolution_time.z * 5.0), params.resolution_time.z)), 3.0);
    float _61 = in.in.in_var_UV.y - 0.5;
    float _66 = in.in.in_var_UV.x - 0.5;
    float4 _75 = in.in.in_var_COLOR0 * albedo.sample(albedo_smp, in.in.in_var_UV);
    float2 _83 = (float2(1.0, fma(-2.0, cos(params.resolution_time.z), 2.0)) * params.resolution_time.z) * 8.0;
    float4 _87 = noise_texture.sample(noise_texture_smp, (_83 + (fma(in.in.in_var_UV, float2(0.5, 0.0), float2(1.0, -2.0)) * 1.0)));
    float _88 = _87.x;
    float _97 = fmod(fma(in.in.in_var_UV.y, 4.0, params.resolution_time.z * 0.5) + sin(params.resolution_time.z + sin(params.resolution_time.z * 0.62999999523162841796875)), 1.0);
    float _100 = step(0.5, _97) - step(0.60000002384185791015625, _97);
    float4 _110 = noise_texture.sample(noise_texture_smp, (_83 + ((in.in.in_var_UV * 2.0) * 1.0)));
    float _111 = _110.x;
    float3 _126 = ((((_75.xyz + float3((fma((_97 - 0.5) * (-9.9999980926513671875), _100, 1.0) * _100) * (_88 * _88))).xyz + float3((_111 * _111) * 0.5)).xyz * (fma(-(_59 * _61), _61, 1.0) * fma(-(_59 * _66), _66, 1.0))).xyz * float3(0.20000000298023223876953125)).xyz * _75.w;
    out.out.out_var_SV_Target0 = float4(_126.x, _126.y, _126.z, _75.w);
    return out_1;
}


