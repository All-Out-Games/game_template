HLSL:
Vertex Shader:
Texture2D<float4> albedo: register(t0);
sampler albedo_smp: register(s0);
Texture2D<float4> noise_texture: register(t1);
sampler noise_texture_smp: register(s1);


cbuffer params: register(b0) {
    float4x4 mvp;
    float4 resolution_time;
};
struct vs_in {
    float2 pos: POS;
    float2 uv: UV;
    float4 color: COLOR;
};
#define FLIP_IF_GL(y) do { } while (0);
struct vs_out {
    float4 color: COLOR0;
    float2 uv: UV;
    float2 shadow_uv: TEXCOORD0;
    float4 pos: SV_Position;
};
vs_out vs_main(vs_in inp) {
    vs_out outp;
    outp.pos = mul(mvp, float4(inp.pos.xy, 0, 1.0f));
    outp.uv = inp.uv;
    outp.color = inp.color;
    outp.shadow_uv = (outp.pos.xy + float2(1,1)) / 2;
    return outp;
}



Fragment Shader:
Texture2D<float4> albedo: register(t0);
sampler albedo_smp: register(s0);
Texture2D<float4> noise_texture: register(t1);
sampler noise_texture_smp: register(s1);


cbuffer params: register(b0) {
    float4x4 mvp;
    float4 resolution_time;
};
struct vs_in {
    float2 pos: POS;
    float2 uv: UV;
    float4 color: COLOR;
};
#define FLIP_IF_GL(y) do { } while (0);
float noise(float2 p)
{
	float s = noise_texture.Sample(noise_texture_smp, float2(1.0f, 2.0f - 2.0f*cos(resolution_time.z))*resolution_time.z*8.0f + p*1.0f).x;
	s *= s;
	return s;
}

float onOff(float a, float b, float c)
{
	return step(c, sin(resolution_time.z + a*cos(resolution_time.z*b)));
}

float ramp(float y, float start, float end)
{
	float inside = step(start,y) - step(end,y);
	float fact = (y-start)/(end-start)*inside;
	return (1.-fact) * inside;
}

float stripes(float2 uv)
{
	float noi = noise(uv*float2(0.5, 0.0) + float2(1.0, -2.0f));
	return ramp(fmod(uv.y*4. + resolution_time.z/2.+sin(resolution_time.z + sin(resolution_time.z*0.63)),1.),0.5,0.6)*noi;
}

float4 ps_main(float4 color: COLOR0, float2 uv: UV, float2 shadow_uv: TEXCOORD0): SV_Target0 {
    float vigAmt = 3.+.3*sin(resolution_time.z + 5.*cos(resolution_time.z*5.));
	float vignette = (1.-vigAmt*(uv.y-.5)*(uv.y-.5))*(1.-vigAmt*(uv.x-.5)*(uv.x-.5));

    float4 result = color * albedo.Sample(albedo_smp, uv);
    float s = stripes(uv);
    float n = noise(uv*2.0f)/2.0f;
    result.rgb += float3(s, s, s);
    result.rgb += float3(n, n, n);
    result.rgb *= vignette;
    result.rgb *= float3(0.2f, 0.2f, 0.2f);
    result.rgb *= result.a;
    return result;
}

